package Rasterization;

import java.io.File;
import java.util.Scanner;
import java.io.FileNotFoundException;
import java.awt.Color;

public class Object{
    public Vector3[] vertices;
    public Vector2[] textureVertices;
    public int[][] trigVertices;
    public int[][] trigTextureVertices;
    public Color[] trigColors;
    public Matrix4 orientation;
    public Vector3 position;
    double rotateSpeed=0.05;
    Object(){
        position=new Vector3();
        orientation=Matrix4.identity();
    }
    Object(String filename) throws FileNotFoundException{
        File file = new File(filename);
        Scanner s = new Scanner(file); 
        int vs=0, vts=0, fs=0;
        String c;
        while(s.hasNextLine()){
            c=s.nextLine().split(" ")[0];
            if(c.equals("v"))
                vs++;
            else if(c.equals("vt"))
                vts++;  
            else if(c.equals("f"))
                fs++;            
        }
        vertices=new Vector3[vs];
        trigVertices=new int[fs][3];
        if (vts!=0){
            textureVertices=new Vector2[vts];
            trigTextureVertices=new int[fs][3];
        }else{
            trigColors=new Color[fs];
        }
        System.out.println(filename+": "+fs);
        int vi=0,vti=0,fi=0;
        String[] line;
        s = new Scanner(file); 
        while(s.hasNextLine()){
            line=s.nextLine().split(" ");
            if(line[0].equals("v")){
                vertices[vi++]=new Vector3(Double.parseDouble(line[1]),Double.parseDouble(line[2]),Double.parseDouble(line[3]));
            }else if(line[0].equals("vt")){
                textureVertices[vti++]=new Vector2(Double.parseDouble(line[1]),Double.parseDouble(line[2]));
            }else if(line[0].equals("f")){
                String[] v1=line[1].split("/");
                String[] v2=line[2].split("/");
                String[] v3=line[3].split("/");
                trigVertices[fi][0]=Integer.parseInt(v1[0]);
                trigVertices[fi][1]=Integer.parseInt(v2[0]);
                trigVertices[fi][2]=Integer.parseInt(v3[0]);
                if (vts!=0){
                    trigTextureVertices[fi][0]=Integer.parseInt(v1[1]);
                    trigTextureVertices[fi][1]=Integer.parseInt(v2[1]);
                    trigTextureVertices[fi][2]=Integer.parseInt(v3[1]);
                }else{
                    trigColors[fi]=Color.ORANGE;
                }
                fi++;
            }
        }
        position=new Vector3();
        orientation=Matrix4.identity();
    }
    Object(Object obj){
        int vs=obj.vertices.length;
        int fs=obj.trigVertices.length;
        vertices = new Vector3[vs];
        trigVertices = new int[fs][3];
        System.arraycopy(obj.vertices, 0, this.vertices, 0, obj.vertices.length);
        for (int i=0;i<fs;i++){
            System.arraycopy(obj.trigVertices[i], 0, this.trigVertices[i], 0, 3);
        }
        if (textureVertices!=null){
            int vts=obj.textureVertices.length;
            System.arraycopy(obj.textureVertices, 0, this.textureVertices, 0, vts);
            for (int i=0;i<vts;i++){
                System.arraycopy(obj.trigTextureVertices[i], 0, this.trigTextureVertices[i], 0, 3);
            }
        }else{
            trigColors=new Color[fs];
            System.arraycopy(obj.trigColors, 0, this.trigColors, 0, fs);        
        }
        orientation = new Matrix4(obj.orientation);
        position = new Vector3(obj.position);
    }

    void rotate(int x,int y,int z){
        orientation=(Matrix4.getRotationMatX(x*rotateSpeed)).
                multiply(Matrix4.getRotationMatY(y*rotateSpeed)).
                multiply(Matrix4.getRotationMatZ(z*rotateSpeed)).multiply(orientation);
    }   
    void move(int x,int y,int z){
        position.x+=x;
        position.y+=y;
        position.z+=z;
    }
    void move(Vector v){
        position.x+=v.x;
        position.y+=v.y;
        position.z+=v.z;
    }
    
    Vector3 findMean(){
        double xsum=0,ysum=0,zsum=0;
        int vs=vertices.length;
        for (int i=0;i<vs;i++){
            xsum+=vertices[i].x;
            ysum+=vertices[i].y;
            zsum+=vertices[i].z;
        }
        return new Vector3(xsum/vs,ysum/vs,zsum/vs);
    }
}
